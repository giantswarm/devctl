{{{{ .Header }}}}
name: Create Release PR
on:
  push:
    branches:
      - 'legacy#release#v*.*.*'
      - 'main#release#v*.*.*'
      - 'main#release#major'
      - 'main#release#minor'
      - 'main#release#patch'
      - 'master#release#v*.*.*'
      - 'master#release#major'
      - 'master#release#minor'
      - 'master#release#patch'
      - 'release#v*.*.*'
      - 'release#major'
      - 'release#minor'
      - 'release#patch'
      - 'release-v*.*.x#release#v*.*.*'
      # "!" negates previous positive patterns so it has to be at the end.
      - '!release-v*.x.x#release#v*.*.*'
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
jobs:
  debug_info:
    name: Debug info
    runs-on: ubuntu-20.04
    steps:
      - name: Print github context JSON
        run: |
          cat <<EOF
          ${{ toJson(github) }}
          EOF
  gather_facts:
    name: Gather facts
    runs-on: ubuntu-20.04
    outputs:
      repo_name: ${{ steps.gather_facts.outputs.repo_name }}
      branch: ${{ steps.gather_facts.outputs.branch }}
      base: ${{ steps.gather_facts.outputs.base }}
      parent_version: ${{ steps.gather_facts.outputs.parent_version }}
      skip: ${{ steps.pr_exists.outputs.skip }}
      version: ${{ steps.gather_facts.outputs.version }}
    steps:
      - name: Gather facts
        id: gather_facts
        run: |
          head="${{ inputs.branch || github.event.ref }}"
          echo "::set-output name=branch::${head}"

          head="${head#refs/heads/}" # Strip "refs/heads/" prefix.
          if [[ $(echo "$head" | grep -o '#' | wc -l) -gt 1 ]]; then
            base="$(echo $head | cut -d '#' -f 1)"
          else
            base="${{ github.event.base_ref }}"
          fi

          base="${base#refs/heads/}" # Strip "refs/heads/" prefix.

          version="$(echo $head | awk -F# '{print $NF}')"
          if [[ $version =~ ^major|minor|patch$ ]]; then
            gh auth login --with-token <<<$(echo -n ${{ secrets.GITHUB_TOKEN }})
            version_parts=($(gh api "repos/${{ github.repository }}/releases/latest" --jq '.tag_name[1:] | split(".") | .[0], .[1], .[2]'))
            version_major=${version_parts[0]}
            version_minor=${version_parts[1]}
            version_patch=${version_parts[2]}
            case ${version} in
              patch)
                version_patch=$((version_patch+1))
                ;;
              minor)
                version_minor=$((version_minor+1))
                version_patch=0
                ;;
              major)
                version_major=$((version_major+1))
                version_minor=0
                version_patch=0
                ;;
              *)
                echo "Unknown Semver level provided"
                exit 1
                ;;
            esac
            version="${version_major}.${version_minor}.${version_patch}"
          else
            version="${version#v}" # Strip "v" prefix.
          fi
          repo_name="$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')"
          echo "repo_name=\"$repo_name\" base=\"$base\" head=\"$head\" version=\"$version\""
          echo "::set-output name=repo_name::${repo_name}"
          echo "::set-output name=base::${base}"
          echo "::set-output name=head::${head}"
          echo "::set-output name=version::${version}"
      - name: Check if PR exists
        id: pr_exists
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          if gh pr view --repo ${{ github.repository }} ${{ steps.gather_facts.outputs.branch }} --json state | grep -i '"state":"OPEN"' >/dev/null; then
            gh pr view --repo ${{ github.repository }} ${{ steps.gather_facts.outputs.branch }}
            echo "::set-output name=skip::true"
          else
            echo "::set-output name=skip::false"
          fi

  build_changelog:
    name: Build changelog
    runs-on: ubuntu-latest
    needs:
      - gather_facts
    if: ${{ needs.gather_facts.outputs.skip != 'true' }}
    container:
      image: docker://giantswarm/go-changelog:0.0.0-9ca8baa4140a49f0fd2c7faeb66d1c85b220ca78
      volumes:
        - ${{ github.workspace }}:/github/workspace
    outputs:
      changelog: ${{ steps.build_changelog.outputs.changelog }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build changelog
      id: build_changelog
      run: |
        parent_version="$(git describe --tags --abbrev=0 HEAD^ || true)"
        /go-changelog/changelog-build \
          -changelog-template /go-changelog/changelog.tmpl \
          -entries-dir .changelog \
          -last-release ${parent_version} \
          -note-template /go-changelog/release-note.tmpl \
          -this-release HEAD \
          -git-dir /github/workspace > .changelog/v${{ needs.gather_facts.outputs.version }}.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload generated changelog
      uses: actions/upload-artifact@v2
      with:
        name: changelog
        path: .changelog

  create_release_pr:
    name: Create release PR
    runs-on: ubuntu-20.04
    needs:
      - gather_facts
{{{{- if .EnableChangelog }}}}
      - build_changelog
    if: ${{ needs.gather_facts.outputs.skip != 'true' }}
{{{{- end }}}}
    env:
      architect_flags: "--organisation ${{ github.repository_owner }} --project ${{ needs.gather_facts.outputs.repo_name }} {{{{ if .EnableChangelog }}}}--update-changelog=true{{{{ else }}}}--update-changelog=false{{{{ end }}}}"
    steps:
      - name: Install architect
        uses: giantswarm/install-binary-action@v1.0.0
        with:
          binary: "architect"
          version: "5.4.0"
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.gather_facts.outputs.branch }}
      - name: Prepare release changes
        run: |
          architect prepare-release ${{ env.architect_flags }} --version "${{ needs.gather_facts.outputs.version }}"
      - name: Download generated changelog
        uses: actions/download-artifact@v2
        with:
          path: .changelog
          name: changelog
      - name: Create release commit
        env:
          version: "${{ needs.gather_facts.outputs.version }}"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          git add -A
          git rm .changelog/*.txt --ignore-unmatch
          git commit -m "Release v${{ env.version }}"
      - name: Push changes
        env:
          remote_repo: "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        run: |
          git push "${remote_repo}" HEAD:${{ needs.gather_facts.outputs.branch }}
      - name: Create PR
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          base: "${{ needs.gather_facts.outputs.base }}"
          branch: "${{ needs.gather_facts.outputs.branch }}"
{{{{- if .EnableChangelog }}}}
          changelog: "${{ needs.build_changelog.outputs.changelog }}"
{{{{- end }}}}
          version: "${{ needs.gather_facts.outputs.version }}"
        run: |
          gh pr create \
            --draft \
            -t "Release v${{ env.version }}" \
{{{{- if .EnableChangelog }}}}
            -F .changelog/v${{ needs.gather_facts.outputs.version }}.md \
{{{{- end }}}}
            -a "${{ github.actor }}" \
            -B "${{ env.base }}" \
            -H "${{ env.branch }}"
