package secretresource

import (
	"github.com/giantswarm/microerror"
	"github.com/giantswarm/micrologger"
	g8sv2 "github.com/giantswarm/apiextensions/pkg/apis/g8s/v2"
	"github.com/giantswarm/apiextensions/pkg/clientset/versioned"
)

type Config struct {
	Client      versioned.Interface
	Logger      micrologger.Logger
	StateGetter StateGetter

	Name string
}

type Resource struct {
	client      versioned.Interface
	logger      micrologger.Logger
	stateGetter StateGetter

	name string
}

func New(config Config) (*Resource, error) {
	if config.Client == nil {
		return nil, microerror.Maskf(invalidConfigError, "%T.Client must not be empty", config)
	}
	if config.Logger == nil {
		return nil, microerror.Maskf(invalidConfigError, "%T.Logger must not be empty", config)
	}
	if config.StateGetter == nil {
		return nil, microerror.Maskf(invalidConfigError, "%T.StateGetter must not be empty", config)
	}

	if config.Name == "" {
		return nil, microerror.Maskf(invalidConfigError, "%T.Name must not be empty", config)
	}

	r := &Resource{
		client:      config.Client,
		logger:      config.Logger,
		stateGetter: config.StateGetter,

		name: config.Name,
	}

	return r, nil
}

func (r *Resource) Name() string {
	return r.name
}

func containsAWSConfig(aWSConfigs []*g8sv2.AWSConfig, aWSConfig *g8sv2.AWSConfig) bool {
	for _, a := range aWSConfigs {
		if aWSConfig.Name == a.Name && aWSConfig.Namespace == a.Namespace {
			return true
		}
	}

	return false
}

func toAWSConfigs(v interface{}) ([]*g8sv2.AWSConfig, error) {
	x, ok := v.([]*g8sv2.AWSConfig)
	if !ok {
		return nil, microerror.Maskf(wrongTypeError, "expected '%T', got '%T'", x, v)
	}

	return x, nil
}
